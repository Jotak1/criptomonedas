{"version":3,"sources":["cripto.png","hooks/useMoneda.js","hooks/useCriptomoneda.js","components/Error.js","components/Formulario.js","components/Cotizacion.js","components/Spinner.js","App.js","reportWebVitals.js","index.js"],"names":["Label","styled","label","Select","select","useMoneda","stateInicial","opciones","useState","state","actualizarState","onChange","e","target","value","map","opcion","codigo","nombre","useCriptomoneda","CoinInfo","Name","FullName","Id","MensajeError","p","Error","mensaje","Boton","input","Formulario","guardarMoneda","guardarCriptomoneda","listacripto","guardarCriptomonedas","error","guardarError","moneda","SelectMonedas","criptomoneda","SelectCripto","useEffect","a","axios","get","resultado","data","Data","consultarAPI","onSubmit","preventDefault","type","ResultadoDiv","div","Info","Precio","Cotizacion","Object","keys","length","console","log","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","Spinner","class","Contenedor","Imagen","img","Heading","h1","App","guardarResultado","cargando","guardarCargando","url","setTimeout","DISPLAY","cotizarCriptomoneda","componente","src","imagen","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iRAAe,MAA0B,mC,OCInCA,EAAQC,IAAOC,MAAV,mNASLC,EAASF,IAAOG,OAAV,wLAmCGC,EAzBG,SAACH,EAAOI,EAAcC,GAAa,MAIhBC,mBAASF,GAJO,mBAI1CG,EAJ0C,KAInCC,EAJmC,KAsBjD,MAAO,CAACD,EAhBY,kBAChB,eAAC,WAAD,WACI,cAACT,EAAD,UAAQE,IACR,eAACC,EAAD,CACIQ,SAAW,SAAAC,GAAC,OAAIF,EAAgBE,EAAEC,OAAOC,QACzCA,MAAOL,EAFX,UAII,wBAAQK,MAAM,GAAd,8BAECP,EAASQ,KAAI,SAAAC,GAAM,OAChB,wBAA4BF,MAAOE,EAAOC,OAA1C,SAAmDD,EAAOE,QAA7CF,EAAOC,kBAMRP,ICzC1BV,EAAQC,IAAOC,MAAV,mNASLC,EAASF,IAAOG,OAAV,wLAmCGe,EAzBS,SAACjB,EAAOI,EAAcC,GAAa,MAItBC,mBAASF,GAJa,mBAIhDG,EAJgD,KAIzCC,EAJyC,KAsBvD,MAAO,CAACD,EAhBa,kBACjB,eAAC,WAAD,WACI,cAAC,EAAD,UAAQP,IACR,eAAC,EAAD,CACIS,SAAW,SAAAC,GAAC,OAAIF,EAAgBE,EAAEC,OAAOC,QACzCA,MAAOL,EAFX,UAII,wBAAQK,MAAM,GAAd,8BAECP,EAASQ,KAAI,SAAAC,GAAM,OAChB,wBAAiCF,MAAOE,EAAOI,SAASC,KAAxD,SAA+DL,EAAOI,SAASE,UAAlEN,EAAOI,SAASG,cAMhBb,I,gBC1C3Bc,EAAevB,IAAOwB,EAAV,gPAgBHC,EAND,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACZ,OACI,cAACH,EAAD,UAAeG,KCRjBC,EAAQ3B,IAAO4B,MAAV,gTA+EIC,EA/DI,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,cAAeC,EAAyB,EAAzBA,oBAAyB,EAGZxB,mBAAS,IAHG,mBAGjDyB,EAHiD,KAGpCC,EAHoC,OAI3B1B,oBAAS,GAJkB,mBAIlD2B,EAJkD,KAI3CC,EAJ2C,OAcxB/B,EAAU,kBAAkB,GAR7C,CACZ,CAACY,OAAQ,MAAOC,OAAQ,gBACxB,CAACD,OAAQ,MAAOC,OAAQ,2BACxB,CAACD,OAAQ,MAAOC,OAAQ,iBACxB,CAACD,OAAQ,MAAOC,OAAQ,QACxB,CAACD,OAAQ,MAAOC,OAAQ,qBAX6B,mBAcjDmB,EAdiD,KAczCC,EAdyC,OAiBnBnB,EAAgB,wBAAwB,GAAGc,GAjBxB,mBAiBjDM,EAjBiD,KAiBnCC,EAjBmC,KAoBzDC,qBAAU,YACY,uCAAG,4BAAAC,EAAA,+IAGOC,IAAMC,IAHb,kFAGXC,EAHW,OAIjBX,EAAqBW,EAAUC,KAAKC,MAJnB,2CAAH,qDAMlBC,KACF,IAkBF,OACI,uBACIC,SAjBc,SAAArC,GAClBA,EAAEsC,iBAIY,KAAXb,GAAiC,KAAhBE,GAKpBH,GAAa,GACbL,EAAcM,GACdL,EAAoBO,IANhBH,GAAa,IAUjB,UAGCD,EAAQ,cAAC,EAAD,CAAOR,QAAQ,sCAAwC,KAC5D,cAACW,EAAD,IAEA,cAACE,EAAD,IACA,cAACZ,EAAD,CACIuB,KAAK,SACLrC,MAAM,iBC5EhBsC,EAAenD,IAAOoD,IAAV,6FAKZC,EAAOrD,IAAOwB,EAAV,iGAQJ8B,EAAStD,IAAOwB,EAAV,+FAsBG+B,EAfI,SAAC,GAAiB,IAAhBX,EAAe,EAAfA,UACjB,OAAqC,IAAlCY,OAAOC,KAAKb,GAAWc,OAAqB,MAE/CC,QAAQC,IAAIhB,GAER,eAACO,EAAD,WACI,eAACG,EAAD,4BAAsB,+BAAOV,EAAUiB,WACvC,eAACR,EAAD,6CAA+B,+BAAOT,EAAUkB,aAChD,eAACT,EAAD,6CAA+B,+BAAOT,EAAUmB,YAChD,eAACV,EAAD,2CAAgC,+BAAOT,EAAUoB,qBACjD,eAACX,EAAD,0CAA4B,+BAAOT,EAAUqB,qBChB1CC,G,MAdC,WACZ,OACI,sBAAKC,MAAM,WAAX,UACA,qBAAKA,MAAM,iBACX,qBAAKA,MAAM,iBACX,qBAAKA,MAAM,iBACX,qBAAKA,MAAM,iBACX,qBAAKA,MAAM,iBACX,qBAAKA,MAAM,sBCFbC,EAAapE,IAAOoD,IAAV,6LAUViB,EAASrE,IAAOsE,IAAV,qEAKNC,EAAUvE,IAAOwE,GAAV,mUAuEEC,MAtDf,WAAgB,IAAD,EACmBlE,mBAAS,IAD5B,mBACN6B,EADM,KACEN,EADF,OAE+BvB,mBAAS,IAFxC,mBAEN+B,EAFM,KAEQP,EAFR,OAGyBxB,mBAAS,IAHlC,mBAGNqC,EAHM,KAGK8B,EAHL,OAIuBnE,oBAAS,GAJhC,mBAINoE,EAJM,KAIIC,EAJJ,KAKbpC,qBAAU,YAEiB,uCAAG,8BAAAC,EAAA,yDAEb,KAAVL,EAFuB,wDAKpByC,EALoB,sEAKgDvC,EALhD,kBAKsEF,GALtE,SAOFM,IAAMC,IAAIkC,GAPR,OAOpBjC,EAPoB,OAU1BgC,GAAgB,GAChBE,YAAW,WAETF,GAAgB,GAEhBF,EAAiB9B,EAAUC,KAAKkC,QAAQzC,GAAcF,MAErD,KAjBuB,2CAAH,qDAmBzB4C,KACC,CAAC5C,EAAOE,IAGX,IAAM2C,EAAcN,EAAY,cAAC,EAAD,IAAc,cAAC,EAAD,CAAY/B,UAAWA,IAErE,OACE,eAACwB,EAAD,WACE,8BACE,cAACC,EAAD,CACEa,IAAKC,EACLC,IAAI,2BAGR,gCACE,cAACb,EAAD,+CAEA,cAAC,EAAD,CACEzC,cAAeA,EACfC,oBAAqBA,IAEtBkD,SC5EMI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.58c4d837.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cripto.a6cec63a.png\";","import styled from '@emotion/styled';\r\nimport React, {Fragment, useState } from 'react';\r\n\r\n\r\nconst Label = styled.label`\r\n    font-family: 'Bebas Neue', cursive;\r\n    color: #FFF;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    font-size: 2.4rem;\r\n    margin-top: 2rem;\r\n    display: block;\r\n`;\r\nconst Select = styled.select`\r\n    width: 100%;\r\n    display:block;\r\n    padding:1rem;\r\n    -webkit-appearance:none;\r\n    border-radius: 10px;\r\n    border: none;\r\n    font-size: 1.2rem;\r\n`;\r\n\r\nconst useMoneda = (label, stateInicial, opciones) => {\r\n\r\n    \r\n    // State de nuestro custom hook\r\n    const [state, actualizarState] = useState(stateInicial);\r\n\r\n    const Seleccionar = () =>(\r\n        <Fragment>\r\n            <Label>{label}</Label>\r\n            <Select\r\n                onChange={ e => actualizarState(e.target.value)}\r\n                value={state}\r\n            >\r\n                <option value=\"\">-- Seleccione --</option>\r\n\r\n                {opciones.map(opcion => (\r\n                    <option key={opcion.codigo} value={opcion.codigo}>{opcion.nombre}</option>\r\n                ))}\r\n            </Select>\r\n        </Fragment>\r\n    );\r\n    // Retornar state, interfaz y fn que modifica el state\r\n    return [state, Seleccionar, actualizarState]\r\n}\r\n \r\nexport default useMoneda;","import styled from '@emotion/styled';\r\nimport React, {Fragment, useState } from 'react';\r\n\r\n\r\nconst Label = styled.label`\r\n    font-family: 'Bebas Neue', cursive;\r\n    color: #FFF;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    font-size: 2.4rem;\r\n    margin-top: 2rem;\r\n    display: block;\r\n`;\r\nconst Select = styled.select`\r\n    width: 100%;\r\n    display:block;\r\n    padding:1rem;\r\n    -webkit-appearance:none;\r\n    border-radius: 10px;\r\n    border: none;\r\n    font-size: 1.2rem;\r\n`;\r\n\r\nconst useCriptomoneda = (label, stateInicial, opciones) => {\r\n\r\n    \r\n    // State de nuestro custom hook\r\n    const [state, actualizarState] = useState(stateInicial);\r\n\r\n    const SelectCripto = () =>(\r\n        <Fragment>\r\n            <Label>{label}</Label>\r\n            <Select\r\n                onChange={ e => actualizarState(e.target.value)}\r\n                value={state}\r\n            >\r\n                <option value=\"\">-- Seleccione --</option>\r\n\r\n                {opciones.map(opcion => (\r\n                    <option key={opcion.CoinInfo.Id} value={opcion.CoinInfo.Name}>{opcion.CoinInfo.FullName}</option>\r\n                ))}\r\n            </Select>\r\n        </Fragment>\r\n    );\r\n    // Retornar state, interfaz y fn que modifica el state\r\n    return [state, SelectCripto, actualizarState]\r\n}\r\n \r\nexport default useCriptomoneda;","import styled from '@emotion/styled';\r\nimport React from 'react';\r\n\r\nconst MensajeError = styled.p`\r\n    background-color: #b7322c;\r\n    padding: 1rem;\r\n    color:#fff;\r\n    font-size: 30px;\r\n    text-transform: uppercase;\r\n    font-weight:bold;\r\n    text-align: center;\r\n    font-family: 'Bebas Neue', cursive;\r\n`;\r\nconst Error = ({mensaje}) => {\r\n    return ( \r\n        <MensajeError>{mensaje}</MensajeError>\r\n     );\r\n}\r\n \r\nexport default Error;","import React, { useEffect, useState } from 'react';\r\nimport styled from '@emotion/styled';\r\nimport useMoneda from '../hooks/useMoneda';\r\nimport useCriptomoneda from '../hooks/useCriptomoneda';\r\nimport axios from 'axios';\r\nimport Error from './Error';\r\n\r\nconst Boton = styled.input`\r\nmargin-top: 20px;\r\nfont-weight: bold;\r\nfont-size: 20px;\r\npadding: 10px;\r\nbackground-color: #66a2fe;\r\nborder: none;\r\nwidth: 100%;\r\nborder-radius: 10px;\r\ncolor: #fff;\r\ntransition: background-color .3s ease;\r\n &:hover{\r\n     background-color: #326ac0;\r\n     cursor:pointer;\r\n }\r\n`;\r\nconst Formulario = ({guardarMoneda, guardarCriptomoneda}) => {\r\n\r\n    // state del listado de criptomonedas\r\n    const [ listacripto, guardarCriptomonedas] = useState([])\r\n    const [error, guardarError] = useState(false);\r\n    \r\n    const MONEDAS = [\r\n        {codigo: 'CLP', nombre: 'Peso Chileno'},\r\n        {codigo: 'USD', nombre: 'Dolar de Estados Unidos'},\r\n        {codigo: 'MXN', nombre: 'Peso Mexicano'},\r\n        {codigo: 'EUR', nombre: 'Euro'},\r\n        {codigo: 'GBP', nombre: 'Libra Esterlina'},\r\n    ]\r\n    // utilizar useMoneda\r\n    const [ moneda, SelectMonedas] = useMoneda('Elige tu Moneda','',MONEDAS);\r\n\r\n    // utilizar useCriptomoneda\r\n    const [ criptomoneda, SelectCripto] = useCriptomoneda('Elige tu Criptomoneda','',listacripto);\r\n\r\n    // Ejecutar llamado a la API\r\n    useEffect(()=>{\r\n        const consultarAPI = async () => {\r\n            const url =`https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=CLP`;\r\n\r\n            const resultado = await axios.get(url);\r\n            guardarCriptomonedas(resultado.data.Data);\r\n        }\r\n        consultarAPI();\r\n    },[]);\r\n\r\n    // cuando el usuario hace submit\r\n    const cotizarMoneda = e => {\r\n        e.preventDefault();\r\n\r\n        // validar si ambos campos estan llenos\r\n\r\n        if(moneda === '' || criptomoneda ===''){\r\n            guardarError(true);\r\n            return;\r\n        }\r\n        // pasar los datos al componente principal\r\n        guardarError(false);\r\n        guardarMoneda(moneda);\r\n        guardarCriptomoneda(criptomoneda);\r\n    }\r\n\r\n    return ( \r\n        <form\r\n            onSubmit={cotizarMoneda}\r\n        >   \r\n        {error ? <Error mensaje=\"Todos los campos son obligatorios\"/> : null}\r\n            <SelectMonedas/>\r\n\r\n            <SelectCripto/>\r\n            <Boton \r\n                type=\"submit\"\r\n                value=\"calcular\"\r\n            />\r\n            \r\n        </form>\r\n     );\r\n}\r\n \r\nexport default Formulario;","import styled from '@emotion/styled';\r\nimport React from 'react';\r\n\r\nconst ResultadoDiv = styled.div`\r\n    color:#fff;\r\n    font-family: Arial, Helvetica, sans-serif;\r\n`;\r\n\r\nconst Info = styled.p`\r\n    font-size: 18px;\r\n\r\n    span{\r\n        font-weight:bold;\r\n    }\r\n`;\r\n\r\nconst Precio = styled.p`\r\n    font-size: 30px;\r\n    span{\r\n        font-weight:bold;\r\n    }\r\n`;\r\n\r\nconst Cotizacion = ({resultado}) => {\r\n    if(Object.keys(resultado).length === 0) return null;\r\n\r\n    console.log(resultado);\r\n    return ( \r\n        <ResultadoDiv>\r\n            <Precio>El precio es: <span>{resultado.PRICE}</span></Precio>\r\n            <Info>Precio más alto del día: <span>{resultado.HIGHDAY}</span></Info>\r\n            <Info>Precio más bajo del día: <span>{resultado.LOWDAY}</span></Info>\r\n            <Info>Variacion últimas 24 hrs: <span>{resultado.CHANGEPCT24HOUR}</span></Info>\r\n            <Info>Última Actualización: <span>{resultado.LASTUPDATE}</span></Info>\r\n        </ResultadoDiv>\r\n     );\r\n}\r\n \r\nexport default Cotizacion;","import React from 'react';\r\nimport './Spinner.css';\r\n\r\nconst Spinner = () => {\r\n    return ( \r\n        <div class=\"sk-chase\">\r\n        <div class=\"sk-chase-dot\"></div>\r\n        <div class=\"sk-chase-dot\"></div>\r\n        <div class=\"sk-chase-dot\"></div>\r\n        <div class=\"sk-chase-dot\"></div>\r\n        <div class=\"sk-chase-dot\"></div>\r\n        <div class=\"sk-chase-dot\"></div>\r\n        </div>\r\n\r\n     );\r\n}\r\n \r\nexport default Spinner;","import React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport imagen from './cripto.png';\nimport Formulario from './components/Formulario';\nimport axios from 'axios';\nimport Cotizacion from './components/Cotizacion';\nimport Spinner from './components/Spinner';\n\n\nconst Contenedor = styled.div`\n  max-width: 900px;\n  margin: 0 auto;\n  @media (min-width:992px){\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    column-gap: 2rem;\n  }\n`;\n\nconst Imagen = styled.img`\n  max-width: 100%;\n  margin-top: 5rem;\n`;\n\nconst Heading = styled.h1`\n   font-family: 'Bebas Neue', cursive;\n   color: #fff;\n   text-align: left;\n   font-weight: 700;\n   font-size: 50px;\n   margin-bottom: 50px;\n   margin-top: 80px;\n  &::after{\n    content: '';\n    width: 100px;\n    height: 6px;\n    background-color: #66a2fe;\n    display: block;\n  }\n`;\n\nfunction App() {\n  const [moneda, guardarMoneda] = useState(\"\");\n  const [criptomoneda, guardarCriptomoneda] = useState(\"\");\n  const [resultado, guardarResultado] = useState({});\n  const [cargando, guardarCargando] = useState(false);\n  useEffect(()=>{\n\n    const cotizarCriptomoneda = async () => {\n      // evitar ejecucion la primera vez\n      if(moneda ==='') return;\n\n      // consultar la api para obtener la cotizacion\n      const url =`https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${criptomoneda}&tsyms=${moneda}`;\n      \n      const resultado = await axios.get(url);\n\n      // mostrar el spinner\n      guardarCargando(true);\n      setTimeout(() => {\n        // cambiar el estado de cargando\n        guardarCargando(false);\n        //guardar cotizacion\n        guardarResultado(resultado.data.DISPLAY[criptomoneda][moneda]);\n    \n      }, 3000);\n      }\n    cotizarCriptomoneda();\n  }, [moneda,criptomoneda]);\n\n  // mMostrar spinner o resultado\n  const componente = (cargando) ? <Spinner/> :  <Cotizacion resultado={resultado} />;\n\n  return (\n    <Contenedor>\n      <div>\n        <Imagen\n          src={imagen}\n          alt=\"imagen criptomonedas\"\n        />\n      </div>\n      <div>\n        <Heading>COTIZA CRIPTOMONEDAS AL INSTANTE</Heading>\n\n        <Formulario\n          guardarMoneda={guardarMoneda}\n          guardarCriptomoneda={guardarCriptomoneda}\n        />\n        {componente}\n      </div>\n      \n    </Contenedor>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}